{"version":3,"sources":["components/Header.js","components/WeatherCard.js","components/Forecast.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","WeatherCard","temperature","city","humidity","icon","description","timezone","clouds","includes","temp","split","length","Card","Content","format","ticking","Feed","Event","Math","round","Meta","src","alt","Forecast","forecast","Group","itemsPerRow","map","data","index","moment","unix","dt","tz","max","min","Description","weather","API_KEY","URL","App","useState","latitude","setLatitude","longitude","setLongitude","setCity","setTemperature","setHumidity","sunrise","setSunrise","sunset","setSunset","setIcon","setForecast","loading","setLoading","setDescription","setTimezone","setClouds","userClouds","setUserClouds","userDescription","setUserDescription","currentCity","setCurrentCity","userCityName","setUserCityName","userTimezone","setUserTimezone","userTemperature","setUserTemperature","userHumidity","setUserHumidity","userIcon","setUserIcon","userForecast","setUserForecast","useEffect","navigator","geolocation","getCurrentPosition","position","coords","axios","get","then","results","current","daily","handleClick","a","response","name","catch","err","alert","undefined","answer","coord","lat","lon","userAnswer","useKeypress","Input","onChange","e","target","value","placeholder","Button","onClick","Loader","active","inline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0774ef45.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return <div className=\"app-header\">Weather App</div>;\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Card, Feed } from \"semantic-ui-react\";\nimport Clock from \"react-live-clock\";\n\nfunction WeatherCard({\n    temperature,\n    city,\n    humidity,\n    icon,\n    description,\n    timezone,\n    clouds,\n}) {\n    if (city.includes(\"/\")) {\n        let temp = city.split(\"/\");\n        city = temp[temp.length - 1];\n    }\n    return (\n        <Card className=\"weather-card-main\">\n            <Card.Content className=\"weather-card\">\n                <Card.Header className=\"weather-card-child\">{city}</Card.Header>\n                <Clock\n                    className=\"clock\"\n                    format={\"HH:mm:ss\"}\n                    ticking={true}\n                    timezone={timezone}\n                />\n            </Card.Content>\n            <Card.Content>\n                <Feed>\n                    <Feed.Event>\n                        <Feed.Content>\n                            <Card.Header className=\"main-temperature\">\n                                <b>\n                                    Temperature:{\" \"}\n                                    {Math.round(temperature * 10) / 10}â„ƒ\n                                </b>\n                            </Card.Header>\n                            <div>\n                                <Card.Meta className=\"weather-card-child\">\n                                    <div>\n                                        <b> Humidity: {humidity} %</b>\n                                    </div>\n                                </Card.Meta>\n                            </div>\n                            <Card.Meta className=\"weather-card-child\">\n                                <div>\n                                    <b> Clouds: {clouds} %</b>\n                                </div>\n                            </Card.Meta>\n                            <div className=\"weather-card\">\n                                <div className=\"weather-card-child\">\n                                    <b>{description}</b>\n                                    <img\n                                        className=\"weather-icon\"\n                                        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n                                        alt=\"\"\n                                    ></img>\n                                </div>\n                            </div>\n                        </Feed.Content>\n                    </Feed.Event>\n                </Feed>\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default WeatherCard;\n","import React from \"react\";\nimport { Card } from \"semantic-ui-react\";\nimport moment from \"moment-timezone\";\nexport default function Forecast({ forecast, timezone }) {\n    return (\n        <div className=\"card-container-main\">\n            <Card.Group itemsPerRow={4}>\n                {forecast.map((data, index) => {\n                    return (\n                        <Card className=\"forecast-card\" key={index}>\n                            <Card.Content>\n                                <Card.Header className=\"forecast-date\">\n                                    {timezone\n                                        ? moment\n                                              .unix(data.dt)\n                                              .tz(timezone)\n                                              .format(\"LL\")\n                                        : null}\n                                </Card.Header>\n                                <Card.Header className=\"forecast-header\">\n                                    Temperature:{\" \"}\n                                    {Math.round(\n                                        (data.temp.max + data.temp.min) / 2\n                                    )}\n                                    â„ƒ\n                                </Card.Header>\n                                <Card.Meta className=\"forecast-header\">\n                                    {\" \"}\n                                    Humidity: {data.humidity}%\n                                </Card.Meta>\n                                <Card.Description className=\"temp-desc\">\n                                    {data.weather[0].description}\n                                    <img\n                                        className=\"weather-icon\"\n                                        src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\n                                        alt=\"\"\n                                    ></img>\n                                    <Card.Meta className=\"forecast-header\">\n                                        {\" \"}\n                                        Max: {Math.round(data.temp.max)}â„ƒ\n                                    </Card.Meta>\n                                    <Card.Meta className=\"forecast-header\">\n                                        {\" \"}\n                                        Min: {Math.round(data.temp.min)}â„ƒ\n                                    </Card.Meta>\n                                </Card.Description>\n                            </Card.Content>\n                        </Card>\n                    );\n                })}\n            </Card.Group>\n        </div>\n    );\n}\n","const API_KEY = `dd13e5fc32c59daf4e5e84185e866d4d`;\n\nexport default API_KEY;\n","import Header from \"./components/Header\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Forecast from \"./components/Forecast\";\nimport { Loader, Input, Button } from \"semantic-ui-react\";\nimport useKeypress from \"react-use-keypress\";\nimport API_KEY from \"./config.js\";\nimport \"./App.css\";\n\nconst URL = `https://api.openweathermap.org/data/2.5/onecall`;\n\nfunction App() {\n    const [latitude, setLatitude] = useState(null);\n    const [longitude, setLongitude] = useState(null);\n    const [city, setCity] = useState(\"\");\n    const [temperature, setTemperature] = useState(null);\n    const [humidity, setHumidity] = useState(null);\n    const [sunrise, setSunrise] = useState(null);\n    const [sunset, setSunset] = useState(null);\n    const [icon, setIcon] = useState(\"\");\n    const [forecast, setForecast] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [description, setDescription] = useState(\"\");\n    const [timezone, setTimezone] = useState(null);\n    const [clouds, setClouds] = useState(null);\n\n    const [userClouds, setUserClouds] = useState(null);\n    const [userDescription, setUserDescription] = useState(\"\");\n    const [currentCity, setCurrentCity] = useState(\"\");\n    const [userCityName, setUserCityName] = useState(\"\");\n    const [userTimezone, setUserTimezone] = useState(\"\");\n    const [userTemperature, setUserTemperature] = useState(null);\n    const [userHumidity, setUserHumidity] = useState(null);\n    const [userIcon, setUserIcon] = useState(\"\");\n    const [userForecast, setUserForecast] = useState([]);\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition(function (position) {\n            setLatitude(position.coords.latitude);\n            setLongitude(position.coords.longitude);\n        });\n        axios\n            .get(\n                `${URL}?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&appid=${API_KEY}&units=metric`\n            )\n            .then((results) => {\n                setLoading(true);\n                setTemperature(results.data.current.temp);\n                setSunset(results.data.current.sunset);\n                setSunrise(results.data.current.sunrise);\n                setHumidity(results.data.current.humidity);\n                setCity(results.data.timezone);\n                setIcon(results.data.current.weather[0].icon);\n                setForecast(results.data.daily);\n                setDescription(results.data.current.weather[0].description);\n                setTimezone(results.data.timezone);\n                setClouds(results.data.current.clouds);\n            });\n    }, [latitude, longitude]);\n\n    const handleClick = async () => {\n        const answer = await axios\n            .get(\n                `https://api.openweathermap.org/data/2.5/weather?q=${currentCity}&appid=${API_KEY}&units=metric`\n            )\n            .then((response) => {\n                setUserCityName(response.data.name);\n                setCurrentCity(\"\");\n\n                return response;\n            })\n            .catch((err) => {\n                alert(\"city not found!\");\n                setCurrentCity(\"\");\n            });\n        if (answer !== undefined) {\n            const userAnswer = await axios\n                .get(\n                    `${URL}?lat=${answer.data.coord.lat}&lon=${answer.data.coord.lon}&exclude=hourly,minutely&appid=${API_KEY}&units=metric`\n                )\n                .then((response) => {\n                    return response;\n                });\n            if (userAnswer !== undefined) {\n                setUserCityName(answer.data.name);\n                setUserTemperature(userAnswer.data.current.temp);\n                setUserHumidity(userAnswer.data.current.humidity);\n                setUserIcon(userAnswer.data.current.weather[0].icon);\n                setUserForecast(userAnswer.data.daily);\n                setUserDescription(\n                    userAnswer.data.current.weather[0].description\n                );\n                setCurrentCity(\"\");\n                setUserTimezone(userAnswer.data.timezone);\n                setUserClouds(userAnswer.data.current.clouds);\n            }\n        }\n    };\n\n    const forecastShower = () => {\n        if (userForecast.length) {\n            return <Forecast forecast={userForecast} timezone={userTimezone} />;\n        } else if (forecast) {\n            return <Forecast forecast={forecast} timezone={timezone} />;\n        } else {\n            return;\n        }\n    };\n\n    const weatherCardShower = () => {\n        if (userForecast.length) {\n            return (\n                <WeatherCard\n                    temperature={userTemperature}\n                    humidity={userHumidity}\n                    city={userCityName}\n                    icon={userIcon}\n                    description={userDescription}\n                    timezone={userTimezone}\n                    clouds={userClouds}\n                />\n            );\n        } else if (loading === true) {\n            return (\n                <WeatherCard\n                    temperature={temperature}\n                    humidity={humidity}\n                    sunrise={sunrise}\n                    sunset={sunset}\n                    city={city}\n                    icon={icon}\n                    description={description}\n                    timezone={timezone}\n                    clouds={clouds}\n                />\n            );\n        } else {\n            return (\n                <div>\n                    <Loader active inline />\n                    Loading, user must enable location to see local weather...\n                </div>\n            );\n        }\n    };\n\n    useKeypress(\"Enter\", () => {\n        handleClick();\n    });\n\n    return (\n        <div className=\"main\">\n            <Header />\n            <div className=\"search-stuff\">\n                <Input\n                    onChange={(e) => setCurrentCity(e.target.value)}\n                    className=\"input-box\"\n                    placeholder=\"City name...\"\n                    value={currentCity}\n                />\n                <Button className=\"search-button\" onClick={() => handleClick()}>\n                    Search\n                </Button>\n            </div>\n            <br />\n            {weatherCardShower()}\n\n            {forecastShower()}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}